package com.rmendel.quizManager.application;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.function.Function;

import com.rmendel.framework.ExpressionUtilities;
import com.rmendel.framework.RMLog;
import com.rmendel.quizManager.api.AnswerDto;
import com.rmendel.quizManager.api.FilterSpecDto;
import com.rmendel.quizManager.api.PageSpecDto;
import com.rmendel.quizManager.api.QuerySpecDto;
import com.rmendel.quizManager.api.QuestionDto;
import com.rmendel.quizManager.api.SortSpecDto;

// TODO Create proper back end classes for QuerySpec, FilterSpec, SortSpec, PageSpec
// TODO Create indexes for supported search keys and key words
// TODO Synchronize access to table data
// TODO Move this to a real database
public final class QuestionTable {
	
	public static final String FILTER_TYPE_WORD_COUNT = "wordCount";
	public static final String FILTER_TYPE_DISTRACTOR_COUNT = "distractorCount"; 
	
	public static final String SORT_BY_WORD_COUNT = "wordCount";

	public QuestionTable() {
	}
	
	public QuestionDto newQuestion() {
		QuestionDto toReturn = new QuestionDto();
		toReturn.setId(
				Integer.toString(getNextQuestionIDSequence()));
		return toReturn;
	}
	
	public AnswerDto newAnswer() {
		AnswerDto toReturn = new AnswerDto();
		toReturn.setId(
				Integer.toString(getNextAnswerIDSequence()));
		return toReturn;
	}
	
	public QuestionDto getRowByID(String lookupID) {
		if(ExpressionUtilities.isTrivial(lookupID)) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a non-trivial value for parameter lookupID.");
			RMLog.error(e);
			throw e;
		}
		
		if(rowsByID.containsKey(lookupID)) {
			return rowsByID.get(lookupID);
		} else {
			IllegalStateException e = new IllegalStateException(
					"Could not find a row with id [" + lookupID + "].");
			RMLog.error(e);
			throw e;
		}
	}
	
	public ArrayList<QuestionDto> getRows(QuerySpecDto querySpecDto) throws Exception {
		if(querySpecDto == null) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a non-trivial value for parameter query.");
			RMLog.error(e);
			throw e;
		}
		
		ArrayList<QuestionDto> toReturn = new ArrayList<QuestionDto>(rowsByID.values());
		
		toReturn = applyFilter(toReturn, querySpecDto.getFilterSpec());
		sort(toReturn, querySpecDto.getSortSpec());
		toReturn = applyPage(toReturn, querySpecDto.getPageSpec());

		return toReturn;
	}
	
	private ArrayList<QuestionDto> applyFilter(
			ArrayList<QuestionDto> questionDtos,
			FilterSpecDto filterSpecDto) {
		if(filterSpecDto == null)
			return questionDtos;
		
		if(ExpressionUtilities.isTrivial(filterSpecDto.getFilterType())) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a non-trivial value for filterType.");
			RMLog.error(e);
			throw e;
		}
		
		// TODO Add more ways to filter
		String filterType = filterSpecDto.getFilterType();
		switch(filterType) {
			case FILTER_TYPE_WORD_COUNT:
				return applyWordCountFilter(questionDtos, filterSpecDto);

			case FILTER_TYPE_DISTRACTOR_COUNT:
				return applyDistractorCountFilter(questionDtos, filterSpecDto);
			
			default:
				IllegalArgumentException e = new IllegalArgumentException(
						"Value [" + filterType + "] is not a valid filterType. Acceptable values include [" + 
						FILTER_TYPE_WORD_COUNT + ", " + FILTER_TYPE_DISTRACTOR_COUNT + "].");
				RMLog.error(e);
				throw e;
		}
	}

	private ArrayList<QuestionDto> applyWordCountFilter(
			ArrayList<QuestionDto> questionDtos, 
			FilterSpecDto filterSpecDto) {
		
		return applyRangeFilter(
				questionDtos,
				filterSpecDto,
				(question)->question.getWordCount());
	}

	private ArrayList<QuestionDto> applyDistractorCountFilter(
			ArrayList<QuestionDto> questionDtos, 
			FilterSpecDto filterSpecDto) {
		
		return applyRangeFilter(
				questionDtos,
				filterSpecDto,
				(question)->question.getDistractors().length);
	}
	
	private ArrayList<QuestionDto> applyRangeFilter(
			ArrayList<QuestionDto> questionDtos, 
			FilterSpecDto filterSpecDto,
			Function<QuestionDto,Integer> valueRule) {
		Integer minValue = parseIntegerFilter(filterSpecDto.getMinValue(), "minValue");
		Integer maxValue = parseIntegerFilter(filterSpecDto.getMaxValue(), "maxValue");
		
		if(minValue == null && maxValue == null)
			return questionDtos;
		
		ArrayList<QuestionDto> toReturn = new ArrayList<QuestionDto>();
		for(QuestionDto questionDto:questionDtos) {
			if(minValue != null && questionDto.getWordCount() < minValue)
				continue;
			if(maxValue != null && questionDto.getWordCount() > maxValue)
				continue;
			
			toReturn.add(questionDto);
		}
		
		return toReturn;
	}
	
	private Integer parseIntegerFilter(
			String filterValue,
			String propertyName) {
		Integer toReturn = null;
		String rawMin = filterValue.trim();
		if(!ExpressionUtilities.isTrivial(rawMin)) {
			try {
				toReturn = Integer.parseInt(rawMin);
			} catch(NumberFormatException numberFormatException) {
				IllegalArgumentException e = new IllegalArgumentException(
						"Value [" + filterValue + "] is not a valid " + propertyName + ". Must specify an integer.");
				RMLog.error(e);
				throw e;
			}
		}
		
		return toReturn;
	}

	// TODO Add more ways to sort
	private void sort(
			ArrayList<QuestionDto> questionDtos,
			SortSpecDto sortSpecDto) {
		if(sortSpecDto == null)
			return;
		
		if(ExpressionUtilities.isTrivial(sortSpecDto.getSortByAttribute())) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a non-trivial value for sortByAttribute.");
			RMLog.error(e);
			throw e;
		}
		
		String sortByAttribute = sortSpecDto.getSortByAttribute();
		switch(sortByAttribute) {
		
			case SORT_BY_WORD_COUNT:
				questionDtos.sort(new Comparator<QuestionDto>() {
					public int compare(QuestionDto first, QuestionDto second) {
						if(first.getWordCount() == second.getWordCount())
							return 0;
						else if(first.getWordCount() < second.getWordCount())
							return -1;
						else
							return 1;
					}
				});
			
			default:
				IllegalArgumentException e = new IllegalArgumentException(
						"Value [" + sortByAttribute + "] is not a valid sortByAttribute. Acceptable values include [" + 
								SORT_BY_WORD_COUNT + "].");
				RMLog.error(e);
				throw e;
		}
	}
	
	// TODO Return an indication of whether the specified page is the last one containing data
	private ArrayList<QuestionDto> applyPage(
			ArrayList<QuestionDto> questionDtos,
			PageSpecDto pageSpecDto) throws Exception {
		if(pageSpecDto == null)
			return questionDtos;
		
		if(pageSpecDto.getRowsPerPage() == null || pageSpecDto.getRowsPerPage() < 1) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify an integer value greater than zero for rowsPerPage.");
			RMLog.error(e);
			throw e;
		}
		
		if(pageSpecDto.getPageOffset() == null || pageSpecDto.getPageOffset() < 0) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a non-negative integer value for pageOffset.");
			RMLog.error(e);
			throw e;
		}
		
		int startOffset;
		try {
			startOffset = pageSpecDto.getPageOffset() * pageSpecDto.getRowsPerPage();
		} catch(Exception e) {
			Exception startOffsetException = new Exception(
					"Unable to calculate row offset for pageOffset [" + pageSpecDto.getPageOffset() + "] and rowsPerPage [" + pageSpecDto.getRowsPerPage() + "].", 
					e);
			RMLog.error(startOffsetException);
			throw startOffsetException;
		}
		
		if(startOffset >= questionDtos.size()) {
			IndexOutOfBoundsException e = new IndexOutOfBoundsException(
					"startOffset for pageSpec is beyond the range of rows in the result set.");
			RMLog.error(e);
			throw e;
		}
		
		int endOffset;
		try {
			endOffset = Math.min(startOffset + pageSpecDto.getRowsPerPage() - 1, questionDtos.size());		
		} catch(Exception e) {
			Exception startOffsetException = new Exception(
					"Unable to calculate ending row offset for pageOffset [" + pageSpecDto.getPageOffset() + "] and rowsPerPage [" + pageSpecDto.getRowsPerPage() + "].", 
					e);
			RMLog.error(startOffsetException);
			throw startOffsetException;
		}
		
		return new ArrayList<QuestionDto>(questionDtos.subList(startOffset, endOffset));
	}

	public void putRow(QuestionDto toAdd) {
		if(toAdd == null) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a question to add.");
			RMLog.error(e);
			throw e;
		}
		
		String id = toAdd.getId();
		if(ExpressionUtilities.isTrivial(id)) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify an id for the question to add.");
			RMLog.error(e);
			throw e;
		}
		
		if(!rowsByID.containsKey(id)) {
			updateWordCount(toAdd);
			rowsByID.put(id, toAdd);
		} else {
			IllegalStateException e = new IllegalStateException(
					"Could not add question with id [" + id + "] because a question with that id already exists.");
			RMLog.error(e);
			throw e;
		}
	}
	
	public void updateRow(QuestionDto toUpdate) {
		if(toUpdate == null) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify a question to update.");
			RMLog.error(e);
			throw e;
		}
		
		String id = toUpdate.getId();
		if(ExpressionUtilities.isTrivial(id)) {
			IllegalArgumentException e = new IllegalArgumentException(
					"Must specify an id for the question to update.");
			RMLog.error(e);
			throw e;
		}
		
		if(rowsByID.containsKey(id)) {
			// TODO Complete QuestionTable.updateRow()
			updateWordCount(toUpdate);
			rowsByID.put(id, toUpdate);
		} else {
			IllegalStateException e = new IllegalStateException(
					"putRow() could not add row with id [" + id + "] because a row with that id already exists.");
			RMLog.error(e);
			throw e;
		}
	}
	
	public int getRowCount() {
		return rowsByID.size();
	}
	
	private int updateWordCount(QuestionDto questionDto) {
		int toReturn = 0;
		
		if(!ExpressionUtilities.isTrivial(questionDto.getQuestionText()))
			toReturn += questionDto.getQuestionText().split(" ").length;
		
		AnswerDto answerDto = questionDto.getAnswer();
		if(answerDto != null && !ExpressionUtilities.isTrivial(answerDto.getResponseText()))
			toReturn += answerDto.getResponseText().split(" ").length;

		for(AnswerDto distractor:questionDto.getDistractors())
			if(!ExpressionUtilities.isTrivial(distractor.getResponseText()))
				toReturn += distractor.getResponseText().split(" ").length;
		
		return toReturn;
	}
	
	private int getNextQuestionIDSequence() {
		return questionIDSequence++;
	}

	private int getNextAnswerIDSequence() {
		return answerIDSequence++;
	}
	
	private int questionIDSequence = 0;
	private int answerIDSequence = 0;
	private HashMap<String, QuestionDto> rowsByID =
			new HashMap<String, QuestionDto>();
}
