package com.rmendel.quizManager.service;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.rmendel.framework.RMLog;
import com.rmendel.framework.ResponseLogEntry;
import com.rmendel.quizManager.api.QuerySpecDto;
import com.rmendel.quizManager.api.QuestionDto;
import com.rmendel.quizManager.api.QuestionResponseDto;
import com.rmendel.quizManager.application.Question;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

@Path("/question")
@Api(value = "question")
public final class QuestionService {
	
	 @GET
	 @Path("/getObject/{id}")
	 @ApiOperation(value = "Gets a single question for the specified id",
	    response = QuestionResponseDto.class,
	    responseContainer = "List")	 
	 @Produces(MediaType.APPLICATION_JSON)
	 public QuestionResponseDto getObject(@PathParam("id") String id) {
		 
		 try(ResponseLogEntry<QuestionResponseDto> logEntry = 
				 new ResponseLogEntry<QuestionResponseDto>("QuestionService.getQuestion")) {
	
			 try {
				 QuestionDto result = Question.getObjectDtoByID(id);
				 logEntry.setResponse(new QuestionResponseDto(true, result));
				 
			 } catch(Exception e) {
				 logEntry.setResponse(new QuestionResponseDto(e));
				 logEntry.setException(e);
			 }

			 return logEntry.getResponse();
		 }
	 }

	 // TODO Document filter types for QuestionDto queries: keyWords
	 // TODO Document sort elements for QuestionDto queries: id, questionText, wordCount, distractorCount
	 @POST
	 @Path("/query")
	 @Produces(MediaType.APPLICATION_JSON)
	 public QuestionResponseDto query(QuerySpecDto query) {
		 
		 try(ResponseLogEntry<QuestionResponseDto> logEntry = 
				 new ResponseLogEntry<QuestionResponseDto>("QuestionService.query")) {
	
			 try {
				 QuestionDto[] result = Question.getObjectDtos(query);
				 logEntry.setResponse(new QuestionResponseDto(true, result));
				 
			 } catch(Exception e) {
				 logEntry.setResponse(new QuestionResponseDto(e));
				 logEntry.setException(e);
			 }

			 return logEntry.getResponse();
		 }
	 }

	 @POST
	 @Path("/insert")
	 @Produces(MediaType.APPLICATION_JSON)
	 public QuestionResponseDto insert(QuestionDto question) {
		 
		 try(ResponseLogEntry<QuestionResponseDto> logEntry = 
				 new ResponseLogEntry<QuestionResponseDto>("QuestionService.insert")) {
	
			 try {
				 QuestionDto result = Question.insertObjectDto(question);
				 logEntry.setResponse(new QuestionResponseDto(true, result));
				 
			 } catch(Exception e) {
				 logEntry.setResponse(new QuestionResponseDto(e));
				 logEntry.setException(e);
			 }

			 return logEntry.getResponse();
		 }
	 }

	 @POST
	 @Path("/update")
	 @Produces(MediaType.APPLICATION_JSON)
	 public QuestionResponseDto update(QuestionDto question) {
		 
		 try(ResponseLogEntry<QuestionResponseDto> logEntry = 
				 new ResponseLogEntry<QuestionResponseDto>("QuestionService.update")) {
	
			 try {
				 QuestionDto result = Question.updateObjectDto(question);
				 logEntry.setResponse(new QuestionResponseDto(true, result));
				 
			 } catch(Exception e) {
				 logEntry.setResponse(new QuestionResponseDto(e));
				 logEntry.setException(e);
			 }

			 return logEntry.getResponse();
		 }
	 }


}
