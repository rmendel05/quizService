package com.rmendel.quizManager.application;

import java.util.ArrayList;

import com.rmendel.framework.ExpressionUtilities;
import com.rmendel.quizManager.api.QuerySpecDto;
import com.rmendel.quizManager.api.QuestionDto;

public class Question {

	public Question() {
	}
	
	public QuestionDto getObjectDtoByID(String id) {
		
	}
	
	public QuestionDto[] getObjectDtos(QuerySpecDto query) {
		
	}
	
	public QuestionDto insertObjectDto(QuestionDto toCreate) {
		
	}
	
	public QuestionDto updateObjectDto(QuestionDto toUpdate) {
		
	}
	
	public QuestionData getObjectByID(String id) throws Exception {
		QuestionTable table = QuestionCache.getInstanceQuestionTable();
		return table.getRowByID(id);
	}

	public ArrayList<QuestionData> getObjects(QuerySpecDto query) throws Exception {
		QuestionTable table = QuestionCache.getInstanceQuestionTable();
		return table.getRows(query);
	}
	
	public QuestionData insertObject(QuestionData toCreate) throws Exception {
		QuestionTable table = QuestionCache.getInstanceQuestionTable();
		table.putRow(toCreate);
		return table.
	}
	
	public QuestionData updateObject(QuestionData toUpdate) {
		
	}
	
	private void updateDerivedProperties(QuestionData question) {
		updateWordCount(question);
	}
	
	private void updateWordCount(QuestionData question) {
		int wordCount = 0;
		
		if(!ExpressionUtilities.isTrivial(question.getQuestionText()))
			wordCount += question.getQuestionText().split(" ").length;
		
		AnswerData AnswerData = question.getAnswer();
		if(AnswerData != null && !ExpressionUtilities.isTrivial(AnswerData.getResponseText()))
			wordCount += AnswerData.getResponseText().split(" ").length;

		for(AnswerData distractor:question.getDistractors())
			if(!ExpressionUtilities.isTrivial(distractor.getResponseText()))
				wordCount += distractor.getResponseText().split(" ").length;
		
		question.setWordCount(wordCount);
	}
	

}
